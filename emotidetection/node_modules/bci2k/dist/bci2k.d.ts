declare const websocket: any;
declare class BCI2K_OperatorConnection {
    websocket: WebSocket;
    _execid: any;
    _exec: any;
    state: any;
    ondisconnect: any;
    onStateChange: any;
    address: string;
    constructor(address?: string);
    connect(address?: string): Promise<void>;
    tap(location: string): Promise<BCI2K_DataConnection>;
    connected(): boolean;
    execute(instruction: string): Promise<unknown>;
    getVersion(): void;
    showWindow(): Promise<unknown>;
    hideWindow(): Promise<unknown>;
    setWatch(state: string, ip: string, port: string): Promise<unknown>;
    resetSystem(): Promise<unknown>;
    setConfig(): Promise<unknown>;
    start(): Promise<unknown>;
    stop(): Promise<unknown>;
    kill(): Promise<unknown>;
    stateListen(): void;
    getSubjectName(): Promise<unknown>;
    getTaskName(): Promise<unknown>;
    getParameters(): Promise<{}>;
}
declare class BCI2K_DataConnection {
    _socket: WebSocket;
    states: any;
    signal: any;
    signalProperties: any;
    stateFormat: any;
    stateVecOrder: any;
    SignalType: any;
    callingFrom: any;
    onconnect: any;
    onGenericSignal: any;
    onStateVector: any;
    onSignalProperties: any;
    onStateFormat: any;
    ondisconnect: any;
    onReceiveBlock: any;
    address: string;
    reconnect: boolean;
    constructor(address?: string);
    private getNullTermString;
    connect(address?: string, callingFrom?: string): Promise<void>;
    disconnect(): void;
    connected(): boolean;
    private _decodeMessage;
    private _decodePhysicalUnits;
    private _decodeSignalProperties;
    private _decodeStateFormat;
    private _decodeGenericSignal;
    private _decodeStateVector;
}
